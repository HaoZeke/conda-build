name: Tests

on:
  # NOTE: github.event context is push payload:
  # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#push
  push:
    branches:
      - master
    paths-ignore:
      - 'docs/**'

  # NOTE: github.event context is pull_request payload:
  # https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#pull_request
  pull_request:
    types:
      - opened
      - reopened
      - synchronize

concurrency:
  # Concurrency group that uses the workflow name and PR number if available
  # or commit SHA as a fallback. If a new build is triggered under that
  # concurrency group while a previous build is running it will be canceled.
  # Repeated pushes to a PR will cancel all previous builds, while multiple
  # merges to main will not cancel.
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  linux:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8']
        conda-version: [release]
        test-type: [serial, parallel]
        test-group: ['1', '2', '3']
        include:
          - python-version: '3.9'
            conda-version: canary
            test-type: serial
            test-group: 1
          - python-version: '3.9'
            conda-version: canary
            test-type: serial
            test-group: 2
          - python-version: '3.9'
            conda-version: canary
            test-type: serial
            test-group: 3
          - python-version: '3.9'
            conda-version: canary
            test-type: parallel
            test-group: 1
          - python-version: '3.9'
            conda-version: canary
            test-type: parallel
            test-group: 2
          - python-version: '3.9'
            conda-version: canary
            test-type: parallel
            test-group: 3
    env:
      OS: 'linux'
      PYTHON: ${{ matrix.python-version }}
      pytest-replay: --replay-record-dir=pytest-replay/ --replay-base-name=Linux-${{ matrix.conda-version }}-Py${{ matrix.python-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          condarc-file: ci/github/condarc-linux
          python-version: ${{ matrix.python-version }}

      - name: Install conda canary
        if: matrix.conda-version == 'canary'
        run: |
          conda install -y -c conda-canary conda

      - name: Install conda release
        if: matrix.conda-version == 'release'
        run: |
          conda install -y conda

      - name: Source Scripts
        run: |
          source ci/github/install_conda_build_test_deps
          pip install -e .
          conda info -a
          mkdir ./pytest-replay

      - name: Run Serial tests
        if: matrix.test-type == 'serial'
        run: |
          pytest \
              --color=yes \
              -vv \
              -n 0 \
              --basetemp /tmp/cb_serial \
              --cov conda_build \
              --cov-report xml \
              --splits 3 \
              --group ${{ matrix.test-group }} \
              -m "serial" tests \
              ${{ env.pytest-replay }}

      - name: Run Parallel tests
        if: matrix.test-type == 'parallel'
        run: |
          pytest \
              --color=yes \
              -vv \
              -n auto \
              --basetemp /tmp/cb \
              --cov conda_build \
              --cov-append \
              --cov-report xml \
              --splits 3 \
              --group ${{ matrix.test-group }} \
              -m "not serial" tests \
              ${{ env.pytest-replay }}

      - uses: codecov/codecov-action@v2
        if: success()
        with:
          flags: ${{ matrix.test-type }}
          env_vars: OS,PYTHON

      - name: Upload Pytest Replay
        uses: actions/upload-artifact@v3
        with:
          name: Linux-${{ matrix.conda-version }}-Py${{ matrix.python-version }}-${{ matrix.test-type }}
          path: pytest-replay/

  windows:
    runs-on: windows-2019
    defaults:
      run:
        shell: powershell
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.7', '3.8']
        conda-version: [release]
        test-type: [serial, parallel]
        test-group: ['1', '2', '3']
        include:
          - python-version: '3.9'
            conda-version: canary
            test-type: serial
            test-group: 1
          - python-version: '3.9'
            conda-version: canary
            test-type: serial
            test-group: 2
          - python-version: '3.9'
            conda-version: canary
            test-type: serial
            test-group: 3
          - python-version: '3.9'
            conda-version: canary
            test-type: parallel
            test-group: 1
          - python-version: '3.9'
            conda-version: canary
            test-type: parallel
            test-group: 2
          - python-version: '3.9'
            conda-version: canary
            test-type: parallel
            test-group: 3
    timeout-minutes: 120
    env:
      OS: 'win-64'
      PYTHON: ${{ matrix.python-version }}
      pytest-replay: --replay-record-dir=${{ github.workspace }}\pytest-replay --replay-base-name=Linux-${{ matrix.conda-version }}-Py${{ matrix.python-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set temp dirs correctly
        # https://github.com/actions/virtual-environments/issues/712
        run: |
          echo "TMPDIR=$env:USERPROFILE\AppData\Local\Temp" >> $env:GITHUB_ENV
          echo "TEMP=$env:USERPROFILE\AppData\Local\Temp" >> $env:GITHUB_ENV
          echo "TMP=$env:USERPROFILE\AppData\Local\Temp" >> $env:GITHUB_ENV

      - name: Install vcpython27.msi
        run: |
          $wc = New-Object net.webclient
          $wc.Downloadfile("https://github.com/GeoNode/geonode-win-installer/raw/ffb76c7cbf1d6b4970c6c25f79c3c7682a3aa035/VCForPython27.msi", "VCForPython27.msi")
          Start-Process "VCForPython27.msi" /qn -Wait

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v2
        with:
          condarc-file: ci/github/condarc-windows
          python-version: ${{ matrix.python-version }}

      - name: Install conda canary
        if: matrix.conda-version == 'canary'
        run: |
          conda install -y -c conda-canary conda

      - name: Install conda release
        if: matrix.conda-version == 'release'
        run: |
          conda install -y conda

      - name: Patch vs2008
        run: |
          Set-PSDebug -Trace 1
          $batchcontent = @"
          ECHO ON
          SET vcpython=C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0
          DIR "%vcpython%"
          CALL "%vcpython%\vcvarsall.bat" %*
          "@
          $batchDir = "C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0\VC"
          $batchPath = "$batchDir" + "\vcvarsall.bat"
          New-Item -Path $batchPath -ItemType "file" -Force
          Set-Content -Value $batchcontent -Path $batchPath
          Get-ChildItem -Path $batchDir
          Get-ChildItem -Path ($batchDir + '\..')
          set LIB

      - name: Configuration
        run: |
          echo on
          conda info
          python -c "import sys; print(sys.version)"
          python -c "import sys; print(sys.executable)"
          python -c "import sys; print(sys.prefix)"
          conda update -q --all
          conda install -q pip python-libarchive-c pytest git pytest-cov jinja2 m2-patch flake8 mock requests contextlib2 chardet glob2 perl pyflakes pycrypto posix m2-git anaconda-client numpy beautifulsoup4 pytest-xdist pytest-mock pytest-replay pytest-rerunfailures conda-forge::pytest-split filelock pkginfo psutil pytz tqdm conda-package-handling py-lief
          python --version
          python -c "import struct; print(struct.calcsize('P') * 8)"
          pip install --no-deps -e .
          conda-build --version
          cd ..
          git clone https://github.com/conda/conda_build_test_recipe
          mkdir "${{ github.workspace }}\pytest-replay"

      - name: Run Serial Tests
        if: matrix.test-type == 'serial'
        run: |
          conda install -y conda-verify
          pytest --color=yes -vv -n 0 --basetemp "$env:TMPDIR\cb" --cov conda_build --cov-report xml -m "serial" --splits 3 --group ${{ matrix.test-group }} ${{ env.pytest-replay }}

      - name: Run Parallel Tests
        if: matrix.test-type == 'parallel'
        run: |
          pytest --color=yes -vv -n auto --basetemp "$env:TMPDIR\cb" --cov conda_build --cov-append --cov-report xml -m "not serial" --splits 3 --group ${{ matrix.test-group }} ${{ env.pytest-replay }}
        env:
          VS90COMNTOOLS: C:\Program Files (x86)\Common Files\Microsoft\Visual C++ for Python\9.0\VC\bin
          LIB: ''

      - uses: codecov/codecov-action@v2
        if: success()
        with:
          flags: ${{ matrix.test-type }}
          env_vars: OS,PYTHON

      - name: Upload Pytest Replay
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/pytest-replay
          name: Win-${{ matrix.conda-version }}-Py${{ matrix.python-version }}-${{ matrix.test-type }}
        if: always()

  macOS:
    runs-on: macos-11
    defaults:
      run:
        shell: bash -l {0}
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.9']
        conda-version: [canary]
        test-type: [serial, parallel]
      max-parallel: 10
    timeout-minutes: 120
    env:
      OS: 'macos'
      PYTHON: ${{ matrix.python-version }}
      pytest-replay: --replay-record-dir=pytest-replay/ --replay-base-name=macOS-${{ matrix.conda-version }}-Py${{ matrix.python-version }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: conda-incubator/setup-miniconda@v2
        with:
          condarc-file: ci/github/condarc-macos
          python-version: ${{ matrix.python-version }}

      - name: Setup CF MacOS Bits and Select Xcode
        run: |
          set -x -e -u
          source ci/github/run_conda_forge_build_setup_osx

      - name: Prepare Test Environment
        run: |
          set -e -u
          conda info
          conda list
          grep '^#' "${CONDA_PREFIX}/conda-meta/history"
          mkdir -p ${{ github.workspace }}/miniconda/{bin,locks}
          chmod -w ${{ github.workspace }}/miniconda/locks

      - name: Install conda canary
        run: |
          conda install -y -c conda-canary conda

      - name: Configuration
        run: |
          conda info
          source ci/github/install_conda_build_test_deps
          pip install -e .
          conda info -a
          conda list --show-channel-urls

      - name: Run Serial Tests
        if: matrix.test-type == 'serial'
        run: |
          set -e -u
          conda install conda-verify -y
          pytest --color=yes -v -n 0 --basetemp /tmp/cb_serial --cov conda_build --cov-report xml -m "serial" tests ${{ env.pytest-replay }}


      - name: Run Parallel Tests
        if: matrix.test-type == 'parallel'
        run: |
          set -e -u
          mkdir -p ~/.conda
          pytest --color=yes -v -n auto --basetemp /tmp/cb --cov conda_build --cov-append --cov-report xml -m "not serial" tests ${{ env.pytest-replay }}

      - uses: codecov/codecov-action@v2
        if: success()
        with:
          flags: ${{ matrix.test-type }}
          env_vars: OS,PYTHON

      - name: Upload Pytest Replay
        if: always()
        uses: actions/upload-artifact@v3
        with:
          path: ${{ github.workspace }}/pytest-replay
          name: macOS-${{ matrix.conda-version }}-Py${{ matrix.python-version }}-${{ matrix.test-type }}
